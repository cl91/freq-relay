/*
  threshold_control.c --- PS/2 interface to control frequency and ROC threshold
*/

#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include "io.h"
#include "altera_up_avalon_ps2.h"
#include "altera_up_ps2_keyboard.h"
#include "FreeRTOS/FreeRTOS.h"
#include "FreeRTOS/queue.h"
#include "FreeRTOS/semphr.h"
#include "FreeRTOS/task.h"
#include "panic.h"

// threshold_queue is used for communication between PS/2 interrupt
// and the threshold control task
// messages sent are threshold differences (eg. up key for freq +0.1)
static xQueueHandle threshold_queue;

struct threshold {
	double freq;
	double roc;
};

// threshold_sem protects access to current_threshold
static xSemaphoreHandle threshold_sem;
static struct threshold current_threshold = {43.7, 10.0};

bool is_off_threshold(double freq, double roc)
{
	bool ret = false;
	xSemaphoreTake(threshold_sem, portMAX_DELAY);
	if ((freq < current_threshold.freq) ||
	    (fabs(roc) > current_threshold.roc))
		ret = true;
	xSemaphoreGive(threshold_sem);
	return ret;
}

struct threshold get_current_threshold(void)
{
	struct threshold ret;
	xSemaphoreTake(threshold_sem, portMAX_DELAY);
	ret = current_threshold;
	xSemaphoreGive(threshold_sem);
	return ret;
}

void threshold_control_task(void *p)
{
	struct threshold diff;
	for (;;) {
		xQueueReceive(threshold_queue, &diff, portMAX_DELAY);
		xSemaphoreTake(threshold_sem, portMAX_DELAY);
		current_threshold.freq += diff.freq;
		current_threshold.roc += diff.roc;
		printf("freq = %f, roc = %f\n", current_threshold.freq, current_threshold.roc);
		xSemaphoreGive(threshold_sem);
	}
}

void do_keyboard_irq(void *context, alt_u32 id)
{
	char ascii;
	int status = 0;
	unsigned char key = 0;
	KB_CODE_TYPE decode_mode;
	struct threshold t = {0, 0};

	status = decode_scancode(context, &decode_mode , &key , &ascii) ;
	if ((status == 0) && (decode_mode == KB_ASCII_MAKE_CODE)) {
		switch (key) {
		case 0x42:	// k
		case 0x75:	// up
			t.freq = 0.1;
			break;
		case 0x3b:	// j
		case 0x72:	// down
			t.freq = -0.1;
			break;
		case 0x33:	// h
		case 0x6b:	// left
			t.roc = -0.1;
			break;
		case 0x4b:	// l
		case 0x74:	// right
			t.roc = 0.1;
			break;
		}
		portBASE_TYPE ignored;
		xQueueSendFromISR(threshold_queue, &t, &ignored);
	}
}

void init_threshold_control(void)
{
	xTaskHandle task;
	threshold_queue = xQueueCreate(1, sizeof(struct threshold));
	if (threshold_queue == NULL)
		panic("xQueueCreate failed");
	vSemaphoreCreateBinary(threshold_sem);
	if (threshold_sem == NULL)
		panic("vSemaphoreCreateBinary failed");
	xTaskCreate(threshold_control_task, "threshold_control", configMINIMAL_STACK_SIZE,
		    NULL, tskIDLE_PRIORITY+1, &task);

	// initialise ps2 (keyboard) device, register keyboard irq
	alt_up_ps2_dev *ps2_device = alt_up_ps2_open_dev(PS2_NAME);
	if (ps2_device == NULL)
		panic("unable to open ps2 device");
	alt_up_ps2_clear_fifo (ps2_device);
	alt_irq_register(PS2_IRQ, ps2_device, do_keyboard_irq);
	// register the PS/2 interrupt
	IOWR_8DIRECT(PS2_BASE,4,1);
}
