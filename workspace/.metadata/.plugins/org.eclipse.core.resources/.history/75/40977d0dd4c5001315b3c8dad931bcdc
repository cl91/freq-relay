/*
 * state_machine.c
 *
 *  Created on: 16/04/2014
 *      Author: cliu712
 */

#include <stdbool.h>
#include <stdio.h>

// forward declarations
bool timer_expired(void);
void reset_timer(void);
bool is_network_unstable(void);
bool try_shed_load(void);
bool try_reconnect(void);

enum states {
	STATE_STABLE,		// network stable, try detecting instability
	STATE_RECONNECT,	// network stable enough, try reconnecting load, will go to stable if all connected
	STATE_SHED_LOAD,	// network unstable, try to shed load,
						// do nothing if all disconnected, goes to monitor unstable
	STATE_MONITOR_UNSTABLE,		// network unstable, monitoring network,
								// will shed load if remains unstable for 0.5sec,
								// will go to monitor stable if fails to detect instability
	STATE_MONITOR_STABLE		// network stable, monitoring network, will reconnect if stable for 0.5sec
								// will go to monitor unstable if detects instability
};

void state_machine_task(void *arg)
{
	enum states state = STATE_STABLE;

	for (;;) {
		printf("state = %d\n", state);
		switch (state) {
		case STATE_STABLE:
			if (is_network_unstable()) {
				state = STATE_SHED_LOAD;
			} else {
				state = STATE_STABLE;
			}
			break;
		case STATE_RECONNECT:
			if (try_reconnect()) {
				reset_timer();
				state = STATE_MONITOR_STABLE;
			} else {	// all loads are reconnected, goes to stable state
				state = STATE_STABLE;
			}
			break;
		case STATE_SHED_LOAD:
			try_shed_load();
			reset_timer();
			state = STATE_MONITOR_UNSTABLE;
			break;
		case STATE_MONITOR_UNSTABLE:
			if (timer_expired()) {
				reset_timer();
				state = STATE_SHED_LOAD;
			} else if (is_network_unstable()) {
				reset_timer();
				state = STATE_MONITOR_UNSTABLE;
			} else {
				state = STATE_MONITOR_STABLE;
			}
			break;
		case STATE_MONITOR_STABLE:
			if (timer_expired()) {
				reset_timer();
				state = STATE_RECONNECT;
			} else if (is_network_unstable()) {
				reset_timer();
				state = STATE_MONITOR_UNSTABLE;
			} else {
				state = STATE_MONITOR_STABLE;
			}
			break;
		}
	}
}
