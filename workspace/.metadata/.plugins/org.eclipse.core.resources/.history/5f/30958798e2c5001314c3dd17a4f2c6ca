/*
 * timer.c
 *
 *  Created on: 16/04/2014
 *      Author: cliu712
 */

#include <stdbool.h>
#include <stdio.h>
#include "FreeRTOS/FreeRTOS.h"
#include "FreeRTOS/semphr.h"
#include "FreeRTOS/timers.h"
#include "FreeRTOS/portmacro.h"
#include "panic.h"

// is_timer_expired does not need protection from a semaphore, as it does not have inconsistent
// intermediate states during data access (data write and read are atomic for native machine word)
// is_timer_expired is used to indicate (to the main
// state machine task) that the 0.5sec timer has expired
bool is_timer_expired;

static xTimerHandle timer;

// timer expires after 500ms
#define TIMER_PERIOD	(500 / portTICK_RATE_MS)

// forward declaration
void timer_callback(xTimerHandle);

void init_timer(void)
{
	vSemaphoreCreateBinary(timer_sem);
	if (timer_sem == NULL) {
		panic("init_timer: unable to create timer semaphore");
	}
	timer = xTimerCreate("timer", TIMER_PERIOD, pdFALSE, NULL, timer_callback);
}

void timer_callback(xTimerHandle timer)
{
	xSemaphoreGive(timer_sem);
}

bool timer_expired(void)
{
	return xSemaphoreTake(timer_sem, 0) == pdTRUE;
}

void reset_timer(void)
{
	xTimerReset(timer, 10);
	xSemaphoreTake(timer_sem, 0);
}
